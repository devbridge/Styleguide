#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var mkdir = require('mkdirp'); // required to be able to create dirs recursively for multi level
var q = require('q');
var formatter = require('format-json');
var pkg = require('../package.json');
var path = require('path');
var stdin = process.stdin;
var stdout = process.stdout;
var startServer  = require('../index.js');

var initialCategories = [{
    name: 'Undefined',
    id: 0
}];

var getMainConfig = function(folder) {
  return {
    projectName: '',
    projectUrl: '',
    projectLogo: '',

    defaultJsResources: [],
    jsResources: [],
    viewportWidths: [320, 480, 768, 1024, 1200],

    serverPort: 8889,
    snippetTemplate: folder + '/template.html',

    sassVariables: [],
    maxSassIterations: 2000,

    database: folder + '/db',
    categories: folder + '/db/categories.txt',
    uniques: folder + '/db/uniques.txt',
    sassData: folder + '/db/sassdata.txt',
    extension: '.txt'
  };
};

var copyContent = function(currentFolder, rootFolder, dbFolder) {
  var templateFolder = path.join(currentFolder, 'node_modules', 'devbridge-styleguide', 'templates'),
    moduleFolder = path.join(currentFolder, 'node_modules', 'devbridge-styleguide'),
    currentContents,
    javascripts,
    fontsFolder;

  if (!fs.existsSync(rootFolder)) {
    mkdir.sync(rootFolder);
    mkdir.sync(dbFolder);
    mkdir.sync(path.join(rootFolder, 'content'));
    mkdir.sync(path.join(rootFolder, 'content', 'fonts'));
    mkdir.sync(path.join(rootFolder, 'js'));

    currentContents = fs.readFileSync(path.join(moduleFolder, 'template.html'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'template.html'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'index.html'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'index.html'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'favicon.ico'));

    fs.writeFileSync(path.join(rootFolder, 'favicon.ico'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'main.css'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'main.css'), currentContents);

    //-----------SVGs---------------

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'db-logo.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'db-logo.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icon-code-active.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'icon-code-active.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icon-code-css.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'icon-code-css.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icon-code-html.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'icon-code-html.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icon-code.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'icon-code.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icon-delete.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'icon-delete.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icon-description.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'icon-description.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icon-down.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'icon-down.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icon-drag.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'icon-drag.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'logo-github.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'logo-github.svg'), currentContents);

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'logo-npm.svg'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'logo-npm.svg'), currentContents);

    //-----------SVGs---------------

    currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'your-logo.png'), 'utf-8');

    fs.writeFileSync(path.join(rootFolder, 'content', 'your-logo.png'), currentContents);

    //-----------fonts--------------
    fontsFolder = fs.readdirSync(path.join(templateFolder, 'content', 'fonts'));

    for (var index = 0, len = fontsFolder.length; index < len; index++) {
      currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'fonts', fontsFolder[index]), 'utf-8');
      fs.writeFileSync(path.join(rootFolder, 'content', 'fonts', fontsFolder[index]), currentContents);
    }

    //----------javascripts----------
    javascripts = fs.readdirSync(path.join(templateFolder, 'js'));

    for (var index = 0, len = javascripts.length; index < len; index++) {
      currentContents = fs.readFileSync(path.join(templateFolder, 'js', javascripts[index]), 'utf-8');
      fs.writeFileSync(path.join(rootFolder, 'js', javascripts[index]), currentContents);
    }
  }

};

var initialize = function(folder) {
  var stdin = process.stdin,
    stdout = process.stdout,
    currentFolder = process.cwd(),
    rootFolder,
    dbFolder;

  if (!folder) {
    folder = 'styleguide';
  }

  rootFolder = path.join(currentFolder, folder);
  dbFolder = path.join(rootFolder, 'db');

  stdin.resume();

  copyContent(currentFolder, rootFolder, dbFolder);

  for (var index = 0, len = initialCategories.length; index < len; index++) {
    fs.writeFileSync(path.join(dbFolder, initialCategories[index].name + '.txt'), formatter.plain([]));
  }

  fs.writeFileSync(path.join(dbFolder + '/' + 'uniques.txt'), formatter.plain([]));
  fs.writeFileSync(path.join(dbFolder + '/' + 'sassdata.txt'), formatter.plain([]));
  fs.writeFileSync(path.join(rootFolder + '/' + 'config.txt'), formatter.plain(getMainConfig(folder)));
  fs.writeFileSync(path.join(dbFolder + '/' + 'categories.txt'), formatter.plain(initialCategories));

  stdout.write('Styleguide was successfully initialized in working directory!');

  process.exit(0);

};

program
  .version(pkg.version)
  .description(pkg.description)
  .usage('<command>');

program
  .command('initialize [folder]')
  .description('initialize styleguide in working directory, if no folder specified - defaults to ./styleguide')
  .action(initialize);

program
    .command('start')
    .description('Starts styleguide server API')
    .action(startServer.startServer);

program.parse(process.argv);
